from django.db import models


class Admin(models.Model):
    """
    Admin is the one creating and editing the link
    -----------------------------------------
    auth(str)  :   Admin auth token
    -----------------------------------------
    """
    auth = models.CharField(max_length=16, primary_key=True)
    name = models.CharField(max_length=64, null=True)
    email = models.CharField(max_length=64, default='', db_index=True)

    class Meta:
        db_table = 'admin'
        managed = True


class User(models.Model):
    """
    User is the one viewing the link and Posting on Page
    -----------------------------------------
    auth(str)  :   User auth token
    -----------------------------------------
    """
    auth = models.CharField(max_length=16, primary_key=True)
    name = models.CharField(max_length=32, null=True, db_index=True)

    class Meta:
        db_table = 'user'
        managed = True



class Page(models.Model):
    """
    the unique page generated by Admin
    -----------------------------------------
    id(int)    : automagically generated
    nurl(str)  : unique id deterministically generated from Clubhouse url
    ctime(t)   : creation time of the Page
    etime(t)   : ending time of the Page
    -----------------------------------------
    """
    nurl = models.CharField(max_length=64, default='', db_index=True)
    ctime = models.DateTimeField(auto_now=True)
    etime = models.DateTimeField(db_index=True, null=True)

    class Meta:
        db_table = 'page'
        managed = True


class Post(models.Model):
    """
    the posts done by any User
    -----------------------------------------
    id(int)   : autoincrement Primary key
    txt(str)  : content of the post
    pid(int)  : id of the page this Post is done on
    ctime(t)  : time at which Post was made
    -----------------------------------------
    """
    txt = models.CharField(max_length=256, default='')
    pid = models.IntegerField(default=0, db_index=True)
    ctime = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'post'
        managed = True
